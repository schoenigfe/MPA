// Generated by gencpp from file trajecgenerator/addCSplineTrajecHandlerRequest.msg
// DO NOT EDIT!


#ifndef TRAJECGENERATOR_MESSAGE_ADDCSPLINETRAJECHANDLERREQUEST_H
#define TRAJECGENERATOR_MESSAGE_ADDCSPLINETRAJECHANDLERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace trajecgenerator
{
template <class ContainerAllocator>
struct addCSplineTrajecHandlerRequest_
{
  typedef addCSplineTrajecHandlerRequest_<ContainerAllocator> Type;

  addCSplineTrajecHandlerRequest_()
    : name()
    , pointsX()
    , pointsY()
    , T()
    , type(0)
    , closed(false)
    , time(0.0)
    , k(0.0)  {
    }
  addCSplineTrajecHandlerRequest_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , pointsX(_alloc)
    , pointsY(_alloc)
    , T(_alloc)
    , type(0)
    , closed(false)
    , time(0.0)
    , k(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pointsX_type;
  _pointsX_type pointsX;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pointsY_type;
  _pointsY_type pointsY;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _T_type;
  _T_type T;

   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _closed_type;
  _closed_type closed;

   typedef float _time_type;
  _time_type time;

   typedef float _k_type;
  _k_type k;





  typedef boost::shared_ptr< ::trajecgenerator::addCSplineTrajecHandlerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trajecgenerator::addCSplineTrajecHandlerRequest_<ContainerAllocator> const> ConstPtr;

}; // struct addCSplineTrajecHandlerRequest_

typedef ::trajecgenerator::addCSplineTrajecHandlerRequest_<std::allocator<void> > addCSplineTrajecHandlerRequest;

typedef boost::shared_ptr< ::trajecgenerator::addCSplineTrajecHandlerRequest > addCSplineTrajecHandlerRequestPtr;
typedef boost::shared_ptr< ::trajecgenerator::addCSplineTrajecHandlerRequest const> addCSplineTrajecHandlerRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::trajecgenerator::addCSplineTrajecHandlerRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::trajecgenerator::addCSplineTrajecHandlerRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::trajecgenerator::addCSplineTrajecHandlerRequest_<ContainerAllocator1> & lhs, const ::trajecgenerator::addCSplineTrajecHandlerRequest_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.pointsX == rhs.pointsX &&
    lhs.pointsY == rhs.pointsY &&
    lhs.T == rhs.T &&
    lhs.type == rhs.type &&
    lhs.closed == rhs.closed &&
    lhs.time == rhs.time &&
    lhs.k == rhs.k;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::trajecgenerator::addCSplineTrajecHandlerRequest_<ContainerAllocator1> & lhs, const ::trajecgenerator::addCSplineTrajecHandlerRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace trajecgenerator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::trajecgenerator::addCSplineTrajecHandlerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trajecgenerator::addCSplineTrajecHandlerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trajecgenerator::addCSplineTrajecHandlerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trajecgenerator::addCSplineTrajecHandlerRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trajecgenerator::addCSplineTrajecHandlerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trajecgenerator::addCSplineTrajecHandlerRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::trajecgenerator::addCSplineTrajecHandlerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b8d56f785274552c60142c0b2c2c3c51";
  }

  static const char* value(const ::trajecgenerator::addCSplineTrajecHandlerRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb8d56f785274552cULL;
  static const uint64_t static_value2 = 0x60142c0b2c2c3c51ULL;
};

template<class ContainerAllocator>
struct DataType< ::trajecgenerator::addCSplineTrajecHandlerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trajecgenerator/addCSplineTrajecHandlerRequest";
  }

  static const char* value(const ::trajecgenerator::addCSplineTrajecHandlerRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::trajecgenerator::addCSplineTrajecHandlerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"float32[] pointsX\n"
"float32[] pointsY\n"
"float32[] T\n"
"uint8 type  #  0: cspline, 1: cspline_hermite, 2: linear\n"
"bool closed\n"
"float32 time\n"
"float32 k\n"
;
  }

  static const char* value(const ::trajecgenerator::addCSplineTrajecHandlerRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::trajecgenerator::addCSplineTrajecHandlerRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.pointsX);
      stream.next(m.pointsY);
      stream.next(m.T);
      stream.next(m.type);
      stream.next(m.closed);
      stream.next(m.time);
      stream.next(m.k);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct addCSplineTrajecHandlerRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::trajecgenerator::addCSplineTrajecHandlerRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::trajecgenerator::addCSplineTrajecHandlerRequest_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "pointsX[]" << std::endl;
    for (size_t i = 0; i < v.pointsX.size(); ++i)
    {
      s << indent << "  pointsX[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pointsX[i]);
    }
    s << indent << "pointsY[]" << std::endl;
    for (size_t i = 0; i < v.pointsY.size(); ++i)
    {
      s << indent << "  pointsY[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pointsY[i]);
    }
    s << indent << "T[]" << std::endl;
    for (size_t i = 0; i < v.T.size(); ++i)
    {
      s << indent << "  T[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.T[i]);
    }
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "closed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.closed);
    s << indent << "time: ";
    Printer<float>::stream(s, indent + "  ", v.time);
    s << indent << "k: ";
    Printer<float>::stream(s, indent + "  ", v.k);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAJECGENERATOR_MESSAGE_ADDCSPLINETRAJECHANDLERREQUEST_H
