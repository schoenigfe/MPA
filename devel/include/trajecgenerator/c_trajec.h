// Generated by gencpp from file trajecgenerator/c_trajec.msg
// DO NOT EDIT!


#ifndef TRAJECGENERATOR_MESSAGE_C_TRAJEC_H
#define TRAJECGENERATOR_MESSAGE_C_TRAJEC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace trajecgenerator
{
template <class ContainerAllocator>
struct c_trajec_
{
  typedef c_trajec_<ContainerAllocator> Type;

  c_trajec_()
    : x(0.0)
    , y(0.0)
    , dx(0.0)
    , dy(0.0)
    , ddx(0.0)
    , ddy(0.0)
    , timestamp(0)  {
    }
  c_trajec_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , dx(0.0)
    , dy(0.0)
    , ddx(0.0)
    , ddy(0.0)
    , timestamp(0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _dx_type;
  _dx_type dx;

   typedef float _dy_type;
  _dy_type dy;

   typedef float _ddx_type;
  _ddx_type ddx;

   typedef float _ddy_type;
  _ddy_type ddy;

   typedef uint64_t _timestamp_type;
  _timestamp_type timestamp;





  typedef boost::shared_ptr< ::trajecgenerator::c_trajec_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trajecgenerator::c_trajec_<ContainerAllocator> const> ConstPtr;

}; // struct c_trajec_

typedef ::trajecgenerator::c_trajec_<std::allocator<void> > c_trajec;

typedef boost::shared_ptr< ::trajecgenerator::c_trajec > c_trajecPtr;
typedef boost::shared_ptr< ::trajecgenerator::c_trajec const> c_trajecConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::trajecgenerator::c_trajec_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::trajecgenerator::c_trajec_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::trajecgenerator::c_trajec_<ContainerAllocator1> & lhs, const ::trajecgenerator::c_trajec_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.dx == rhs.dx &&
    lhs.dy == rhs.dy &&
    lhs.ddx == rhs.ddx &&
    lhs.ddy == rhs.ddy &&
    lhs.timestamp == rhs.timestamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::trajecgenerator::c_trajec_<ContainerAllocator1> & lhs, const ::trajecgenerator::c_trajec_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace trajecgenerator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::trajecgenerator::c_trajec_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trajecgenerator::c_trajec_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trajecgenerator::c_trajec_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trajecgenerator::c_trajec_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trajecgenerator::c_trajec_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trajecgenerator::c_trajec_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::trajecgenerator::c_trajec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4f8f0800921be74c12ef659643444bbd";
  }

  static const char* value(const ::trajecgenerator::c_trajec_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4f8f0800921be74cULL;
  static const uint64_t static_value2 = 0x12ef659643444bbdULL;
};

template<class ContainerAllocator>
struct DataType< ::trajecgenerator::c_trajec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trajecgenerator/c_trajec";
  }

  static const char* value(const ::trajecgenerator::c_trajec_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::trajecgenerator::c_trajec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n"
"float32 y\n"
"float32 dx\n"
"float32 dy\n"
"float32 ddx\n"
"float32 ddy\n"
"uint64 timestamp\n"
;
  }

  static const char* value(const ::trajecgenerator::c_trajec_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::trajecgenerator::c_trajec_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.dx);
      stream.next(m.dy);
      stream.next(m.ddx);
      stream.next(m.ddy);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct c_trajec_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::trajecgenerator::c_trajec_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::trajecgenerator::c_trajec_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "dx: ";
    Printer<float>::stream(s, indent + "  ", v.dx);
    s << indent << "dy: ";
    Printer<float>::stream(s, indent + "  ", v.dy);
    s << indent << "ddx: ";
    Printer<float>::stream(s, indent + "  ", v.ddx);
    s << indent << "ddy: ";
    Printer<float>::stream(s, indent + "  ", v.ddy);
    s << indent << "timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAJECGENERATOR_MESSAGE_C_TRAJEC_H
