// Generated by gencpp from file trajecgenerator/plotTrajectoryRequest.msg
// DO NOT EDIT!


#ifndef TRAJECGENERATOR_MESSAGE_PLOTTRAJECTORYREQUEST_H
#define TRAJECGENERATOR_MESSAGE_PLOTTRAJECTORYREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace trajecgenerator
{
template <class ContainerAllocator>
struct plotTrajectoryRequest_
{
  typedef plotTrajectoryRequest_<ContainerAllocator> Type;

  plotTrajectoryRequest_()
    : title()
    , maxT(0.0)
    , dT(0.0)
    , k(0.0)
    , xrange()
    , yrange()  {
      xrange.assign(0.0);

      yrange.assign(0.0);
  }
  plotTrajectoryRequest_(const ContainerAllocator& _alloc)
    : title(_alloc)
    , maxT(0.0)
    , dT(0.0)
    , k(0.0)
    , xrange()
    , yrange()  {
  (void)_alloc;
      xrange.assign(0.0);

      yrange.assign(0.0);
  }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _title_type;
  _title_type title;

   typedef float _maxT_type;
  _maxT_type maxT;

   typedef float _dT_type;
  _dT_type dT;

   typedef float _k_type;
  _k_type k;

   typedef boost::array<float, 2>  _xrange_type;
  _xrange_type xrange;

   typedef boost::array<float, 2>  _yrange_type;
  _yrange_type yrange;





  typedef boost::shared_ptr< ::trajecgenerator::plotTrajectoryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trajecgenerator::plotTrajectoryRequest_<ContainerAllocator> const> ConstPtr;

}; // struct plotTrajectoryRequest_

typedef ::trajecgenerator::plotTrajectoryRequest_<std::allocator<void> > plotTrajectoryRequest;

typedef boost::shared_ptr< ::trajecgenerator::plotTrajectoryRequest > plotTrajectoryRequestPtr;
typedef boost::shared_ptr< ::trajecgenerator::plotTrajectoryRequest const> plotTrajectoryRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::trajecgenerator::plotTrajectoryRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::trajecgenerator::plotTrajectoryRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::trajecgenerator::plotTrajectoryRequest_<ContainerAllocator1> & lhs, const ::trajecgenerator::plotTrajectoryRequest_<ContainerAllocator2> & rhs)
{
  return lhs.title == rhs.title &&
    lhs.maxT == rhs.maxT &&
    lhs.dT == rhs.dT &&
    lhs.k == rhs.k &&
    lhs.xrange == rhs.xrange &&
    lhs.yrange == rhs.yrange;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::trajecgenerator::plotTrajectoryRequest_<ContainerAllocator1> & lhs, const ::trajecgenerator::plotTrajectoryRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace trajecgenerator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::trajecgenerator::plotTrajectoryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trajecgenerator::plotTrajectoryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trajecgenerator::plotTrajectoryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trajecgenerator::plotTrajectoryRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trajecgenerator::plotTrajectoryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trajecgenerator::plotTrajectoryRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::trajecgenerator::plotTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2860cf7d8312d3024b3ab61f13528c56";
  }

  static const char* value(const ::trajecgenerator::plotTrajectoryRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2860cf7d8312d302ULL;
  static const uint64_t static_value2 = 0x4b3ab61f13528c56ULL;
};

template<class ContainerAllocator>
struct DataType< ::trajecgenerator::plotTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trajecgenerator/plotTrajectoryRequest";
  }

  static const char* value(const ::trajecgenerator::plotTrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::trajecgenerator::plotTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string title\n"
"float32 maxT\n"
"float32 dT\n"
"float32 k\n"
"float32[2] xrange\n"
"float32[2] yrange\n"
;
  }

  static const char* value(const ::trajecgenerator::plotTrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::trajecgenerator::plotTrajectoryRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.title);
      stream.next(m.maxT);
      stream.next(m.dT);
      stream.next(m.k);
      stream.next(m.xrange);
      stream.next(m.yrange);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct plotTrajectoryRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::trajecgenerator::plotTrajectoryRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::trajecgenerator::plotTrajectoryRequest_<ContainerAllocator>& v)
  {
    s << indent << "title: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.title);
    s << indent << "maxT: ";
    Printer<float>::stream(s, indent + "  ", v.maxT);
    s << indent << "dT: ";
    Printer<float>::stream(s, indent + "  ", v.dT);
    s << indent << "k: ";
    Printer<float>::stream(s, indent + "  ", v.k);
    s << indent << "xrange[]" << std::endl;
    for (size_t i = 0; i < v.xrange.size(); ++i)
    {
      s << indent << "  xrange[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.xrange[i]);
    }
    s << indent << "yrange[]" << std::endl;
    for (size_t i = 0; i < v.yrange.size(); ++i)
    {
      s << indent << "  yrange[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.yrange[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAJECGENERATOR_MESSAGE_PLOTTRAJECTORYREQUEST_H
