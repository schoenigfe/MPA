// Generated by gencpp from file trajecgenerator/addCircleTrajecHandlerRequest.msg
// DO NOT EDIT!


#ifndef TRAJECGENERATOR_MESSAGE_ADDCIRCLETRAJECHANDLERREQUEST_H
#define TRAJECGENERATOR_MESSAGE_ADDCIRCLETRAJECHANDLERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace trajecgenerator
{
template <class ContainerAllocator>
struct addCircleTrajecHandlerRequest_
{
  typedef addCircleTrajecHandlerRequest_<ContainerAllocator> Type;

  addCircleTrajecHandlerRequest_()
    : name()
    , mx(0.0)
    , my(0.0)
    , a(0.0)
    , b(0.0)
    , time(0.0)
    , k(0.0)  {
    }
  addCircleTrajecHandlerRequest_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , mx(0.0)
    , my(0.0)
    , a(0.0)
    , b(0.0)
    , time(0.0)
    , k(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef float _mx_type;
  _mx_type mx;

   typedef float _my_type;
  _my_type my;

   typedef float _a_type;
  _a_type a;

   typedef float _b_type;
  _b_type b;

   typedef float _time_type;
  _time_type time;

   typedef float _k_type;
  _k_type k;





  typedef boost::shared_ptr< ::trajecgenerator::addCircleTrajecHandlerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trajecgenerator::addCircleTrajecHandlerRequest_<ContainerAllocator> const> ConstPtr;

}; // struct addCircleTrajecHandlerRequest_

typedef ::trajecgenerator::addCircleTrajecHandlerRequest_<std::allocator<void> > addCircleTrajecHandlerRequest;

typedef boost::shared_ptr< ::trajecgenerator::addCircleTrajecHandlerRequest > addCircleTrajecHandlerRequestPtr;
typedef boost::shared_ptr< ::trajecgenerator::addCircleTrajecHandlerRequest const> addCircleTrajecHandlerRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::trajecgenerator::addCircleTrajecHandlerRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::trajecgenerator::addCircleTrajecHandlerRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::trajecgenerator::addCircleTrajecHandlerRequest_<ContainerAllocator1> & lhs, const ::trajecgenerator::addCircleTrajecHandlerRequest_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.mx == rhs.mx &&
    lhs.my == rhs.my &&
    lhs.a == rhs.a &&
    lhs.b == rhs.b &&
    lhs.time == rhs.time &&
    lhs.k == rhs.k;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::trajecgenerator::addCircleTrajecHandlerRequest_<ContainerAllocator1> & lhs, const ::trajecgenerator::addCircleTrajecHandlerRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace trajecgenerator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::trajecgenerator::addCircleTrajecHandlerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trajecgenerator::addCircleTrajecHandlerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trajecgenerator::addCircleTrajecHandlerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trajecgenerator::addCircleTrajecHandlerRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trajecgenerator::addCircleTrajecHandlerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trajecgenerator::addCircleTrajecHandlerRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::trajecgenerator::addCircleTrajecHandlerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a4faaf714cc18070417071d78411d73";
  }

  static const char* value(const ::trajecgenerator::addCircleTrajecHandlerRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a4faaf714cc1807ULL;
  static const uint64_t static_value2 = 0x0417071d78411d73ULL;
};

template<class ContainerAllocator>
struct DataType< ::trajecgenerator::addCircleTrajecHandlerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trajecgenerator/addCircleTrajecHandlerRequest";
  }

  static const char* value(const ::trajecgenerator::addCircleTrajecHandlerRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::trajecgenerator::addCircleTrajecHandlerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"float32 mx\n"
"float32 my\n"
"float32 a\n"
"float32 b\n"
"float32 time\n"
"float32 k\n"
;
  }

  static const char* value(const ::trajecgenerator::addCircleTrajecHandlerRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::trajecgenerator::addCircleTrajecHandlerRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.mx);
      stream.next(m.my);
      stream.next(m.a);
      stream.next(m.b);
      stream.next(m.time);
      stream.next(m.k);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct addCircleTrajecHandlerRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::trajecgenerator::addCircleTrajecHandlerRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::trajecgenerator::addCircleTrajecHandlerRequest_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "mx: ";
    Printer<float>::stream(s, indent + "  ", v.mx);
    s << indent << "my: ";
    Printer<float>::stream(s, indent + "  ", v.my);
    s << indent << "a: ";
    Printer<float>::stream(s, indent + "  ", v.a);
    s << indent << "b: ";
    Printer<float>::stream(s, indent + "  ", v.b);
    s << indent << "time: ";
    Printer<float>::stream(s, indent + "  ", v.time);
    s << indent << "k: ";
    Printer<float>::stream(s, indent + "  ", v.k);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAJECGENERATOR_MESSAGE_ADDCIRCLETRAJECHANDLERREQUEST_H
