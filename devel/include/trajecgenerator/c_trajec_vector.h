// Generated by gencpp from file trajecgenerator/c_trajec_vector.msg
// DO NOT EDIT!


#ifndef TRAJECGENERATOR_MESSAGE_C_TRAJEC_VECTOR_H
#define TRAJECGENERATOR_MESSAGE_C_TRAJEC_VECTOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <trajecgenerator/c_trajec.h>

namespace trajecgenerator
{
template <class ContainerAllocator>
struct c_trajec_vector_
{
  typedef c_trajec_vector_<ContainerAllocator> Type;

  c_trajec_vector_()
    : points()  {
    }
  c_trajec_vector_(const ContainerAllocator& _alloc)
    : points(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::trajecgenerator::c_trajec_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::trajecgenerator::c_trajec_<ContainerAllocator> >::other >  _points_type;
  _points_type points;





  typedef boost::shared_ptr< ::trajecgenerator::c_trajec_vector_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trajecgenerator::c_trajec_vector_<ContainerAllocator> const> ConstPtr;

}; // struct c_trajec_vector_

typedef ::trajecgenerator::c_trajec_vector_<std::allocator<void> > c_trajec_vector;

typedef boost::shared_ptr< ::trajecgenerator::c_trajec_vector > c_trajec_vectorPtr;
typedef boost::shared_ptr< ::trajecgenerator::c_trajec_vector const> c_trajec_vectorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::trajecgenerator::c_trajec_vector_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::trajecgenerator::c_trajec_vector_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::trajecgenerator::c_trajec_vector_<ContainerAllocator1> & lhs, const ::trajecgenerator::c_trajec_vector_<ContainerAllocator2> & rhs)
{
  return lhs.points == rhs.points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::trajecgenerator::c_trajec_vector_<ContainerAllocator1> & lhs, const ::trajecgenerator::c_trajec_vector_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace trajecgenerator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::trajecgenerator::c_trajec_vector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trajecgenerator::c_trajec_vector_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trajecgenerator::c_trajec_vector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trajecgenerator::c_trajec_vector_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trajecgenerator::c_trajec_vector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trajecgenerator::c_trajec_vector_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::trajecgenerator::c_trajec_vector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d88f63147d96501d5ff38e0f76d36cc9";
  }

  static const char* value(const ::trajecgenerator::c_trajec_vector_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd88f63147d96501dULL;
  static const uint64_t static_value2 = 0x5ff38e0f76d36cc9ULL;
};

template<class ContainerAllocator>
struct DataType< ::trajecgenerator::c_trajec_vector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trajecgenerator/c_trajec_vector";
  }

  static const char* value(const ::trajecgenerator::c_trajec_vector_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::trajecgenerator::c_trajec_vector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c_trajec[] points\n"
"\n"
"================================================================================\n"
"MSG: trajecgenerator/c_trajec\n"
"float32 x\n"
"float32 y\n"
"float32 dx\n"
"float32 dy\n"
"float32 ddx\n"
"float32 ddy\n"
"uint64 timestamp\n"
;
  }

  static const char* value(const ::trajecgenerator::c_trajec_vector_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::trajecgenerator::c_trajec_vector_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct c_trajec_vector_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::trajecgenerator::c_trajec_vector_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::trajecgenerator::c_trajec_vector_<ContainerAllocator>& v)
  {
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::trajecgenerator::c_trajec_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAJECGENERATOR_MESSAGE_C_TRAJEC_VECTOR_H
